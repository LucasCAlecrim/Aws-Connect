# .github/workflows/deploy.yml

name: Deploy EC2 Instance

on:
  push:
    branches:
      - main  # O workflow será acionado em pushes na branch 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest  # Especifica que o job será executado em um ambiente Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Faz o checkout do código no repositório

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # ID da chave de acesso AWS
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Chave de acesso secreta AWS
          aws-region: us-east-1  # Região desejada

      - name: Terraform Init
        run: terraform init  # Inicializa o Terraform

      - name: Terraform Apply
        id: terraform_apply  # Atribui um ID à etapa para referência futura
        run: terraform apply -auto-approve  # Aplica a configuração do Terraform automaticamente

      - name: Capture Outputs
        id: capture_outputs
        run: |
          echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_ENV  # Captura o ID da instância
          echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_ENV  # Captura o IP público

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh  # Cria o diretório .ssh, se não existir
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Adiciona a chave privada
          chmod 600 ~/.ssh/id_rsa  # Define permissões adequadas para a chave

      - name: SSH into EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$public_ip "echo 'Instância conectada com sucesso!'"  # Conecta via SSH
